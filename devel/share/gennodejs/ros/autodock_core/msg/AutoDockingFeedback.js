// Auto-generated. Do not edit!

// (in-package autodock_core.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class AutoDockingFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.progress = null;
      this.status = null;
      this.state = null;
    }
    else {
      if (initObj.hasOwnProperty('progress')) {
        this.progress = initObj.progress
      }
      else {
        this.progress = 0.0;
      }
      if (initObj.hasOwnProperty('status')) {
        this.status = initObj.status
      }
      else {
        this.status = '';
      }
      if (initObj.hasOwnProperty('state')) {
        this.state = initObj.state
      }
      else {
        this.state = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type AutoDockingFeedback
    // Serialize message field [progress]
    bufferOffset = _serializer.float32(obj.progress, buffer, bufferOffset);
    // Serialize message field [status]
    bufferOffset = _serializer.string(obj.status, buffer, bufferOffset);
    // Serialize message field [state]
    bufferOffset = _serializer.uint8(obj.state, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type AutoDockingFeedback
    let len;
    let data = new AutoDockingFeedback(null);
    // Deserialize message field [progress]
    data.progress = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [status]
    data.status = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [state]
    data.state = _deserializer.uint8(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.status);
    return length + 9;
  }

  static datatype() {
    // Returns string type for a message object
    return 'autodock_core/AutoDockingFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a81bac62ffc117ad82928737b405b684';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    ######################################################################
    # FEEDBACK
    
    ## progress approx, 0 - 1.0 
    float32 progress
    
    ## verbose description of the progress
    string status
    
    ## state
    uint8 STATE_INVALID = 0
    uint8 STATE_IDLE = 1
    uint8 STATE_PREDOCK = 2
    uint8 STATE_PARALLEL_CORRECTION = 3
    uint8 STATE_STEER_DOCK = 4
    uint8 STATE_LAST_MILE = 5
    uint8 STATE_ACTIVATE_CHARGER = 6
    uint8 STATE_RETRY = 7
    uint8 STATE_PAUSE = 8
    
    uint8 state
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new AutoDockingFeedback(null);
    if (msg.progress !== undefined) {
      resolved.progress = msg.progress;
    }
    else {
      resolved.progress = 0.0
    }

    if (msg.status !== undefined) {
      resolved.status = msg.status;
    }
    else {
      resolved.status = ''
    }

    if (msg.state !== undefined) {
      resolved.state = msg.state;
    }
    else {
      resolved.state = 0
    }

    return resolved;
    }
};

// Constants for message
AutoDockingFeedback.Constants = {
  STATE_INVALID: 0,
  STATE_IDLE: 1,
  STATE_PREDOCK: 2,
  STATE_PARALLEL_CORRECTION: 3,
  STATE_STEER_DOCK: 4,
  STATE_LAST_MILE: 5,
  STATE_ACTIVATE_CHARGER: 6,
  STATE_RETRY: 7,
  STATE_PAUSE: 8,
}

module.exports = AutoDockingFeedback;
