// Generated by gencpp from file autodock_core/AutoDockingFeedback.msg
// DO NOT EDIT!


#ifndef AUTODOCK_CORE_MESSAGE_AUTODOCKINGFEEDBACK_H
#define AUTODOCK_CORE_MESSAGE_AUTODOCKINGFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autodock_core
{
template <class ContainerAllocator>
struct AutoDockingFeedback_
{
  typedef AutoDockingFeedback_<ContainerAllocator> Type;

  AutoDockingFeedback_()
    : progress(0.0)
    , status()
    , state(0)  {
    }
  AutoDockingFeedback_(const ContainerAllocator& _alloc)
    : progress(0.0)
    , status(_alloc)
    , state(0)  {
  (void)_alloc;
    }



   typedef float _progress_type;
  _progress_type progress;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_type;
  _status_type status;

   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATE_INVALID)
  #undef STATE_INVALID
#endif
#if defined(_WIN32) && defined(STATE_IDLE)
  #undef STATE_IDLE
#endif
#if defined(_WIN32) && defined(STATE_PREDOCK)
  #undef STATE_PREDOCK
#endif
#if defined(_WIN32) && defined(STATE_PARALLEL_CORRECTION)
  #undef STATE_PARALLEL_CORRECTION
#endif
#if defined(_WIN32) && defined(STATE_STEER_DOCK)
  #undef STATE_STEER_DOCK
#endif
#if defined(_WIN32) && defined(STATE_LAST_MILE)
  #undef STATE_LAST_MILE
#endif
#if defined(_WIN32) && defined(STATE_ACTIVATE_CHARGER)
  #undef STATE_ACTIVATE_CHARGER
#endif
#if defined(_WIN32) && defined(STATE_RETRY)
  #undef STATE_RETRY
#endif
#if defined(_WIN32) && defined(STATE_PAUSE)
  #undef STATE_PAUSE
#endif

  enum {
    STATE_INVALID = 0u,
    STATE_IDLE = 1u,
    STATE_PREDOCK = 2u,
    STATE_PARALLEL_CORRECTION = 3u,
    STATE_STEER_DOCK = 4u,
    STATE_LAST_MILE = 5u,
    STATE_ACTIVATE_CHARGER = 6u,
    STATE_RETRY = 7u,
    STATE_PAUSE = 8u,
  };


  typedef boost::shared_ptr< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct AutoDockingFeedback_

typedef ::autodock_core::AutoDockingFeedback_<std::allocator<void> > AutoDockingFeedback;

typedef boost::shared_ptr< ::autodock_core::AutoDockingFeedback > AutoDockingFeedbackPtr;
typedef boost::shared_ptr< ::autodock_core::AutoDockingFeedback const> AutoDockingFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autodock_core::AutoDockingFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autodock_core::AutoDockingFeedback_<ContainerAllocator1> & lhs, const ::autodock_core::AutoDockingFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.progress == rhs.progress &&
    lhs.status == rhs.status &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autodock_core::AutoDockingFeedback_<ContainerAllocator1> & lhs, const ::autodock_core::AutoDockingFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autodock_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a81bac62ffc117ad82928737b405b684";
  }

  static const char* value(const ::autodock_core::AutoDockingFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa81bac62ffc117adULL;
  static const uint64_t static_value2 = 0x82928737b405b684ULL;
};

template<class ContainerAllocator>
struct DataType< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autodock_core/AutoDockingFeedback";
  }

  static const char* value(const ::autodock_core::AutoDockingFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"######################################################################\n"
"# FEEDBACK\n"
"\n"
"## progress approx, 0 - 1.0 \n"
"float32 progress\n"
"\n"
"## verbose description of the progress\n"
"string status\n"
"\n"
"## state\n"
"uint8 STATE_INVALID = 0\n"
"uint8 STATE_IDLE = 1\n"
"uint8 STATE_PREDOCK = 2\n"
"uint8 STATE_PARALLEL_CORRECTION = 3\n"
"uint8 STATE_STEER_DOCK = 4\n"
"uint8 STATE_LAST_MILE = 5\n"
"uint8 STATE_ACTIVATE_CHARGER = 6\n"
"uint8 STATE_RETRY = 7\n"
"uint8 STATE_PAUSE = 8\n"
"\n"
"uint8 state\n"
"\n"
;
  }

  static const char* value(const ::autodock_core::AutoDockingFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.progress);
      stream.next(m.status);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutoDockingFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autodock_core::AutoDockingFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autodock_core::AutoDockingFeedback_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "progress: ";
    Printer<float>::stream(s, indent + "  ", v.progress);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTODOCK_CORE_MESSAGE_AUTODOCKINGFEEDBACK_H
