// Generated by gencpp from file autodock_core/AutoDockingGoal.msg
// DO NOT EDIT!


#ifndef AUTODOCK_CORE_MESSAGE_AUTODOCKINGGOAL_H
#define AUTODOCK_CORE_MESSAGE_AUTODOCKINGGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autodock_core
{
template <class ContainerAllocator>
struct AutoDockingGoal_
{
  typedef AutoDockingGoal_<ContainerAllocator> Type;

  AutoDockingGoal_()
    : docking_waypoint()  {
    }
  AutoDockingGoal_(const ContainerAllocator& _alloc)
    : docking_waypoint(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _docking_waypoint_type;
  _docking_waypoint_type docking_waypoint;





  typedef boost::shared_ptr< ::autodock_core::AutoDockingGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autodock_core::AutoDockingGoal_<ContainerAllocator> const> ConstPtr;

}; // struct AutoDockingGoal_

typedef ::autodock_core::AutoDockingGoal_<std::allocator<void> > AutoDockingGoal;

typedef boost::shared_ptr< ::autodock_core::AutoDockingGoal > AutoDockingGoalPtr;
typedef boost::shared_ptr< ::autodock_core::AutoDockingGoal const> AutoDockingGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autodock_core::AutoDockingGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autodock_core::AutoDockingGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autodock_core::AutoDockingGoal_<ContainerAllocator1> & lhs, const ::autodock_core::AutoDockingGoal_<ContainerAllocator2> & rhs)
{
  return lhs.docking_waypoint == rhs.docking_waypoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autodock_core::AutoDockingGoal_<ContainerAllocator1> & lhs, const ::autodock_core::AutoDockingGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autodock_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autodock_core::AutoDockingGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autodock_core::AutoDockingGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autodock_core::AutoDockingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autodock_core::AutoDockingGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autodock_core::AutoDockingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autodock_core::AutoDockingGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autodock_core::AutoDockingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1166f30e9b74233e3cfce92a16969363";
  }

  static const char* value(const ::autodock_core::AutoDockingGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1166f30e9b74233eULL;
  static const uint64_t static_value2 = 0x3cfce92a16969363ULL;
};

template<class ContainerAllocator>
struct DataType< ::autodock_core::AutoDockingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autodock_core/AutoDockingGoal";
  }

  static const char* value(const ::autodock_core::AutoDockingGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autodock_core::AutoDockingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"######################################################################\n"
"# GOAL\n"
"## docking waypoint heading to the charging station\n"
"string docking_waypoint\n"
"\n"
;
  }

  static const char* value(const ::autodock_core::AutoDockingGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autodock_core::AutoDockingGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.docking_waypoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutoDockingGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autodock_core::AutoDockingGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autodock_core::AutoDockingGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "docking_waypoint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.docking_waypoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTODOCK_CORE_MESSAGE_AUTODOCKINGGOAL_H
